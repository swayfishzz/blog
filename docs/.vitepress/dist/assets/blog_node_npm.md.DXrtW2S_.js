import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BsJ0pqcO.js";const F=JSON.parse('{"title":"npm 包管理器","description":"","frontmatter":{},"headers":[],"relativePath":"blog/node/npm.md","filePath":"blog/node/npm.md"}'),p={name:"blog/node/npm.md"},t=n(`<h1 id="npm-包管理器" tabindex="-1">npm 包管理器 <a class="header-anchor" href="#npm-包管理器" aria-label="Permalink to &quot;npm 包管理器&quot;">​</a></h1><h2 id="包的概念" tabindex="-1">包的概念 <a class="header-anchor" href="#包的概念" aria-label="Permalink to &quot;包的概念&quot;">​</a></h2><p>&quot;包&quot;（Package）通常指的是一个由相关的代码和资源封装成的一个可独立使用的单元，旨在促进代码的模块化和重用。不同的编程语言中，使用不同的工具来管理包。例如，Node.js 使用 npm，Python 使用 pip，Java 使用 Maven。</p><p>npm（Node Package Manager）通常与 Node.js 一起安装，因为它是 Node.js 的默认包管理工具。</p><h2 id="npm-配置" tabindex="-1">npm 配置 <a class="header-anchor" href="#npm-配置" aria-label="Permalink to &quot;npm 配置&quot;">​</a></h2><p>npm 具有许多配置选项，可用于自定义 npm 的行为和设置。</p><p>若要获取和设置全局配置，可以使用以下命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 获取一个全局配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> value</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 更改一个全局配置</span></span></code></pre></div><p><strong>查看 npm 配置</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看用户修改的配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 查看 npm 所有配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --json</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 以 json 形式查看所有配置</span></span></code></pre></div><p><strong>修改 npm 镜像源</strong></p><p>npm 的镜像源位于国外，下载速度慢，有时会因此下载失败。我们可以将下载地址切换到淘宝的 npmmirror 镜像站</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://registry.npmmirror.com</span></span></code></pre></div><h2 id="使用-nrm-管理镜像源" tabindex="-1">使用 nrm 管理镜像源 <a class="header-anchor" href="#使用-nrm-管理镜像源" aria-label="Permalink to &quot;使用 nrm 管理镜像源&quot;">​</a></h2><p>nrm 是一个简单的 npm 镜像源管理工具，它提供了许多的镜像源，可以快速的在他们之间切换，只需几行命令即可：</p><p><strong>安装 nrm</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nrm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p><strong>查看镜像</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm ---------- https://registry.npmjs.org/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  yarn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---------</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.yarnpkg.com/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tencent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ------</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://mirrors.cloud.tencent.com/npm/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cnpm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---------</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://r.cnpmjs.org/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  taobao</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -------</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  npmMirror</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://skimdb.npmjs.com/registry/</span></span></code></pre></div><p><strong>切换镜像</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taobao</span></span></code></pre></div><p><strong>查看当前使用的镜像</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> current</span></span></code></pre></div><p><strong>添加镜像源</strong></p><p>适用于企业内部定制的私有源，<code>&lt;registry&gt;</code> 表示源名称，<code>&lt;url&gt;</code> 表示源地址。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">registr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><strong>测试镜像的响应时间</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nrm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taobao</span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><h3 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h3><p>使用 <code>npm init</code> 初始化一个目录，运行命令后，会询问项目相关信息，通常使用 <code>npm init -y</code> 代表使用默认配置，即可跳过交互，并创建 <code>package.json</code> 文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span></span></code></pre></div><h3 id="还原项目依赖" tabindex="-1">还原项目依赖 <a class="header-anchor" href="#还原项目依赖" aria-label="Permalink to &quot;还原项目依赖&quot;">​</a></h3><p>根据项目的 package.json 文件来安装所有依赖项</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span></span></code></pre></div><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><strong>生产依赖安装</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 安装多个包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名@版本号</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 安装指定版本</span></span></code></pre></div><p><strong>开发依赖安装</strong></p><p>使用 <code>-D</code> 参数安装包将它们添加到项目的 <code>devDependencies</code> 中，<code>devDependencies</code> 是一组仅在开发环境中需要的包的列表。这样做可以减小生产环境的包大小。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><h3 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><p>查看全局安装的包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth=0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # depth=0代表查看的嵌套层级为0</span></span></code></pre></div><p>查看存放全局包的路径</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prefix</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><h3 id="卸载" tabindex="-1">卸载 <a class="header-anchor" href="#卸载" aria-label="Permalink to &quot;卸载&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> un</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 移除包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> un</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 移除全局安装的包</span></span></code></pre></div><h3 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新所有过时的包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新单个包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 包名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新 npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><h3 id="检查过时的包" tabindex="-1">检查过时的包 <a class="header-anchor" href="#检查过时的包" aria-label="Permalink to &quot;检查过时的包&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> outdated</span></span></code></pre></div><h3 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-label="Permalink to &quot;npx&quot;">​</a></h3><p>npx 的用途是使用非全局安装的 npm 包的命令行工具。全局安装可能会导致不同项目之间的版本冲突。使用 npx 可以确保每个项目都使用其依赖中指定的确切版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-react-app</span></span></code></pre></div><p>运行上面的代码时，npx 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。这样就会避免全局包的版本差异问题。</p><h2 id="其它包管理器" tabindex="-1">其它包管理器 <a class="header-anchor" href="#其它包管理器" aria-label="Permalink to &quot;其它包管理器&quot;">​</a></h2><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h3><p><a href="https://www.yarnpkg.cn/" target="_blank" rel="noreferrer">yarn</a> 是由 Facebook、Google、Exponent 和 Tilde 联合推出的一款包管理器，它旨在解决 npm 的一些痛点。但 npm 跟快就学习了 yarn 的优点，截止 npm@6 时，与 yarn 已经没有多少差距。</p><p><strong>优点</strong></p><ul><li>速度快: Yarn 通过并行安装和缓存优化显著提高了安装速度。</li><li>离线模式: 如果之前已经下载过依赖，Yarn 可以从本地缓存中安装它们，无需联网。</li><li>友好的错误信息。</li></ul><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h3><p><a href="https://pnpm.io/zh" target="_blank" rel="noreferrer">pnpm</a> 旨在提高安装速度并减少磁盘空间的使用。pnpm 代表 &quot;performant npm&quot;，它采用了一种独特的依赖安装方式，称为“硬链接”（hard links）和“符号链接”（symbolic links），这种方式与 npm 和 yarn 的扁平化节点模块结构不同。</p><p>pnpm 的特点：</p><ul><li>节省磁盘空间：通过使用全局存储区来保存所有的依赖项，并通过符号链接指向这些依赖项，pnpm 能够大幅减少项目实际占用的磁盘空间。</li><li>快速安装：由于大多数依赖项已经被下载到了全局存储区中，后续的安装过程只需创建链接即可，这大大加快了安装速度。</li><li>严格的依赖隔离：pnpm 遵循严格的依赖层级结构，这意味着一个包只能访问它自己声明的依赖，从而避免了扁平结构可能引起的冲突。</li><li>安全性：pnpm 通过使用 SHA-1 哈希校验来确保每次安装的依赖项都是预期的那个版本，增强了安全性。</li></ul><p>随着越来越多人采用，pnpm 的社区正在快速增长，提供了丰富的文档和支持。</p>`,67),h=[t];function e(l,k,r,d,o,g){return a(),i("div",null,h)}const y=s(p,[["render",e]]);export{F as __pageData,y as default};
