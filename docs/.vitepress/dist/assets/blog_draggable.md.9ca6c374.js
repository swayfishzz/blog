import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.8048b864.js";const v=JSON.parse('{"title":"拖拽 API","description":"","frontmatter":{},"headers":[],"relativePath":"blog/draggable.md","filePath":"blog/draggable.md"}'),l={name:"blog/draggable.md"},o=e(`<h1 id="拖拽-api" tabindex="-1">拖拽 API <a class="header-anchor" href="#拖拽-api" aria-label="Permalink to &quot;拖拽 API&quot;">​</a></h1><p>HTML5 引入了一套拖拽 API，相比于传统的 <code>mousedown</code>、<code>mouseup</code> 方式更加强大</p><p>若要使用拖拽 API，需要先向元素添加一个 <code>draggable</code> 的布尔属性，设置为 <code>true</code>，以允许元素进行拖拽</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">draggable</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">draggable</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="拖拽事件" tabindex="-1">拖拽事件 <a class="header-anchor" href="#拖拽事件" aria-label="Permalink to &quot;拖拽事件&quot;">​</a></h2><ul><li><code>dragstart</code>：拖拽开始时触发，通常在拖动开始时设置拖动数据</li><li><code>drag</code>：拖拽过程中触发</li><li><code>dragend</code>：拖动操作结束时触发，可用于清理和处理拖动操作</li></ul><h2 id="拖放事件" tabindex="-1">拖放事件 <a class="header-anchor" href="#拖放事件" aria-label="Permalink to &quot;拖放事件&quot;">​</a></h2><p>拖拽元素到达目标元素后的一系列事件，例如：将 A 元素拖动到 B 位置，进入 B 位置后的一系列事件</p><ul><li><code>dragenter</code>：进入目标时触发。</li><li><code>dragover</code>：在目标上悬停时持续触发，通常需要阻止默认行为以允许放置。</li><li><code>dragleave</code>：离开目标时触发。</li><li><code>drop</code>：在目标上释放时触发，通常用于处理拖放操作（若没有阻止<code>drapover</code>默认行为，该事件不会触发）</li></ul><h2 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h2><p>通过<code>dataTransfer</code>对象可以在拖动和释放阶段传递数据</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dragstart&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.dataTransfer.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;拖拽的数据&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;drop&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">draggedData</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.dataTransfer.</span><span style="color:#B392F0;">getData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理拖放的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dragstart&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  event.dataTransfer.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;拖拽的数据&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;drop&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">draggedData</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.dataTransfer.</span><span style="color:#6F42C1;">getData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理拖放的数据</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="光标样式" tabindex="-1">光标样式 <a class="header-anchor" href="#光标样式" aria-label="Permalink to &quot;光标样式&quot;">​</a></h2><p>在 HTML5 的拖拽 API 中，<code>DataTransfer</code>对象的<code>effectAllowed</code>属性和<code>dropEffect</code>属性用于控制和指示拖拽操作的可用效果和实际效果。它们通常在拖拽事件处理程序中使用。</p><p><strong><code>effectAllowed</code>属性</strong>：须在 <code>dropstart</code> 时添加</p><p><code>effectAllowed</code>属性用于指定源元素可执行的拖拽操作类型。它可以设置为以下值之一：</p><ul><li><code>&#39;none&#39;</code>: 不允许拖拽操作。</li><li><code>&#39;copy&#39;</code>: 允许复制操作。</li><li><code>&#39;move&#39;</code>: 允许移动操作。</li><li><code>&#39;link&#39;</code>: 允许创建链接操作。</li><li><code>&#39;copyLink&#39;</code>: 允许复制链接操作。</li><li><code>&#39;copyMove&#39;</code>: 允许复制和移动操作。</li><li><code>&#39;linkMove&#39;</code>: 允许链接和移动操作。</li><li><code>&#39;all&#39;</code>: 允许所有类型的操作。</li></ul><p>示例用法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dragstart&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.dataTransfer.effectAllowed </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;move&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dragstart&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  event.dataTransfer.effectAllowed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;move&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong><code>dropEffect</code>属性</strong>：</p><p><code>dropEffect</code>属性用于指示在拖放目标上释放拖拽元素时的实际操作类型。它可以设置为与<code>effectAllowed</code>属性相同的值，但最终效果由用户代理（浏览器）根据拖拽的目标和源元素来确定。</p><p>示例用法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dragover&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.dataTransfer.dropEffect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;move&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dragover&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  event.dataTransfer.dropEffect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;move&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>通常，在<code>dragover</code>事件中使用<code>event.preventDefault()</code>以允许在拖放目标上释放，并设置<code>dropEffect</code>以指示可能的拖放操作。实际效果是否与设置的一致可能会因浏览器和操作系统的不同而有所不同。</p><p>这两个属性的使用可以帮助开发者在拖拽操作中提供更好的用户反馈，并在允许的操作范围内控制拖拽行为。请注意，这些属性的兼容性可能因浏览器而异，因此在实际使用中需要进行兼容性测试。</p>`,25),p=[o];function t(c,r,d,E,i,y){return a(),n("div",null,p)}const h=s(l,[["render",t]]);export{v as __pageData,h as default};
