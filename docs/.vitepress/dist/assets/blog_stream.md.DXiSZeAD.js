import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.DwILdc5J.js";const b=JSON.parse('{"title":"流","description":"","frontmatter":{},"headers":[],"relativePath":"blog/stream.md","filePath":"blog/stream.md"}'),o={name:"blog/stream.md"},d=r('<h1 id="流" tabindex="-1">流 <a class="header-anchor" href="#流" aria-label="Permalink to &quot;流&quot;">​</a></h1><p>流是用于在 Node.js 中处理流数据的抽象接口。<code>node:stream</code> 模块提供了用于实现流接口的 API。</p><p>流可以是可读的、可写的、或两者兼而有之。所有的流都是 <code>EventEmitter</code> 的实例。</p><hr><p>Node.js 中有四种基本的流类型：</p><p><code>Writable</code>：可以写入数据的流（例如，fs.createWriteStream()）。</p><p><code>Readable</code>：可以从中读取数据的流（例如，fs.createReadStream()）。</p><p><code>Duplex</code>：Readable 和 Writable 的流（例如，net.Socket）。</p><p><code>Transform</code>：可以在写入和读取数据时修改或转换数据的 Duplex 流（例如，zlib.createDeflate()）。</p><h2 id="可读流-readable" tabindex="-1">可读流 Readable <a class="header-anchor" href="#可读流-readable" aria-label="Permalink to &quot;可读流 Readable&quot;">​</a></h2><h2 id="可写流-writable" tabindex="-1">可写流 Writable <a class="header-anchor" href="#可写流-writable" aria-label="Permalink to &quot;可写流 Writable&quot;">​</a></h2><h2 id="双工流-duplex" tabindex="-1">双工流 Duplex <a class="header-anchor" href="#双工流-duplex" aria-label="Permalink to &quot;双工流 Duplex&quot;">​</a></h2><h2 id="转换流-transform" tabindex="-1">转换流 Transform <a class="header-anchor" href="#转换流-transform" aria-label="Permalink to &quot;转换流 Transform&quot;">​</a></h2>',13),l=[d];function c(s,i,n,h,p,m){return t(),a("div",null,l)}const f=e(o,[["render",c]]);export{b as __pageData,f as default};
