import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.ea234428.js";const v=JSON.parse('{"title":"Vite 基本使用","description":"","frontmatter":{},"headers":[],"relativePath":"articles/vue/vite.md","filePath":"articles/vue/vite.md"}'),l={name:"articles/vue/vite.md"},o=p(`<h1 id="vite-基本使用" tabindex="-1">Vite 基本使用 <a class="header-anchor" href="#vite-基本使用" aria-label="Permalink to &quot;Vite 基本使用&quot;">​</a></h1><p>Vite 是一个面向现代前端开发的工具，旨在提供更快的开发体验和更高的性能。</p><h2 id="使用-vite-创建项目" tabindex="-1">使用 Vite 创建项目 <a class="header-anchor" href="#使用-vite-创建项目" aria-label="Permalink to &quot;使用 Vite 创建项目&quot;">​</a></h2><p>打开终端，导航到你想要创建项目的目录，使用以下命令创建一个新的 Vite 项目。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite@latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite@latest</span></span></code></pre></div><p>运行后，Vite 将在终端中提供一些可供选择的配置，这些配置按步骤分别为：</p><ol><li>项目名称（默认 vite-project）</li><li>选择一个框架，如 Vue、React、Svelte 等，根据自己需求进行选择</li><li>选择一个开发方式，如 TypeScript、JavaScript、Nuxt 等，根据自己需求进行选择</li></ol><p>然后 Vite 会创建项目文件结构，创建完成后，使用以下命令启动开发服务器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">vite-project</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 将终端导航到你的项目中</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 构建依赖项</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 启动开发服务器</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">vite-project</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 将终端导航到你的项目中</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 构建依赖项</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 启动开发服务器</span></span></code></pre></div><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>环境变量通常用于配置不同环境下的应用程序行为，例如开发、生产或测试环境。</p><h3 id="内置环境变量" tabindex="-1">内置环境变量 <a class="header-anchor" href="#内置环境变量" aria-label="Permalink to &quot;内置环境变量&quot;">​</a></h3><p>使用 <code>i<wbr>mport.meta.env</code> 对象，可以访问内置环境变量，常用内置环境变量有：</p><ul><li><code>i<wbr>mport.meta.env.MODE</code>：当前的构建模式（如 <code>&#39;development&#39;</code>、<code>&#39;production&#39;</code>）</li><li><code>i<wbr>mport.meta.env.BASE_URL</code>：应用部署时的基本 URL，它由 <code>vite.config.js</code> 中的 <a href="https://cn.vitejs.dev/config/shared-options.html#base" target="_blank" rel="noreferrer"><code>base</code> 配置项</a>决定</li><li><code>i<wbr>mport.meta.env.PROD</code>：布尔值，表示应用是否运行在生产环境中</li><li><code>i<wbr>mport.meta.env.DEV</code>：布尔值，表示应用是否运行在开发环境中</li></ul><p>在代码中，可以这样使用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// any</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">MODE</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 打印当前模式</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">DEV</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 检查是否为开发环境</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// any</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">MODE</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 打印当前模式</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">DEV</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 检查是否为开发环境</span></span></code></pre></div><h3 id="自定义环境变量" tabindex="-1">自定义环境变量 <a class="header-anchor" href="#自定义环境变量" aria-label="Permalink to &quot;自定义环境变量&quot;">​</a></h3><p>也可以在项目的根目录中创建一个名为 <code>.env</code> 的文件，然后在该文件中定义自定义的环境变量。这些自定义环境变量需要以 <code>VITE_</code> 开头，并且可以在代码中通过 <code>i<wbr>mport.meta.env</code> 访问</p><p>例如，在 <code>.env</code> 文件中自定义一个环境变量，并在代码中访问它</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .env 中进行定义</span></span>
<span class="line"><span style="color:#79B8FF;">VITE_APP_BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://domain.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 其它文件中访问</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">VITE_APP_BASE_URL</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .env 中进行定义</span></span>
<span class="line"><span style="color:#005CC5;">VITE_APP_BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://domain.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 其它文件中访问</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">VITE_APP_BASE_URL</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="env-文件类型" tabindex="-1">env 文件类型 <a class="header-anchor" href="#env-文件类型" aria-label="Permalink to &quot;env 文件类型&quot;">​</a></h3><p>还可以为不同的模式创建 env 文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">.env</span><span style="color:#E1E4E8;"> 										</span><span style="color:#6A737D;"># 所有情况下都会加载</span></span>
<span class="line"><span style="color:#B392F0;">.env.local</span><span style="color:#E1E4E8;"> 							</span><span style="color:#6A737D;"># 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#B392F0;">.env.development</span><span style="color:#E1E4E8;"> 				</span><span style="color:#6A737D;"># 只在开发模式下加载</span></span>
<span class="line"><span style="color:#B392F0;">.env.production</span><span style="color:#E1E4E8;"> 				</span><span style="color:#6A737D;"># 只在生产模式下加载</span></span>
<span class="line"><span style="color:#B392F0;">.env.production.local</span><span style="color:#E1E4E8;"> 	</span><span style="color:#6A737D;"># 只在生产模式下加载，并被 git 忽略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.env</span><span style="color:#24292E;"> 										</span><span style="color:#6A737D;"># 所有情况下都会加载</span></span>
<span class="line"><span style="color:#6F42C1;">.env.local</span><span style="color:#24292E;"> 							</span><span style="color:#6A737D;"># 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#6F42C1;">.env.development</span><span style="color:#24292E;"> 				</span><span style="color:#6A737D;"># 只在开发模式下加载</span></span>
<span class="line"><span style="color:#6F42C1;">.env.production</span><span style="color:#24292E;"> 				</span><span style="color:#6A737D;"># 只在生产模式下加载</span></span>
<span class="line"><span style="color:#6F42C1;">.env.production.local</span><span style="color:#24292E;"> 	</span><span style="color:#6A737D;"># 只在生产模式下加载，并被 git 忽略</span></span></code></pre></div><p>例如，根据环境不同，访问对应的环境变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .env.development</span></span>
<span class="line"><span style="color:#79B8FF;">VITE_BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// .env.production</span></span>
<span class="line"><span style="color:#79B8FF;">VITE_BASE_URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://domain.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// any</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">VITE_BASE_URL</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 根据不同模式输出不同的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .env.development</span></span>
<span class="line"><span style="color:#005CC5;">VITE_BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// .env.production</span></span>
<span class="line"><span style="color:#005CC5;">VITE_BASE_URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://domain.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// any</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">VITE_BASE_URL</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 根据不同模式输出不同的值</span></span></code></pre></div><h2 id="vite-常用配置" tabindex="-1">Vite 常用配置 <a class="header-anchor" href="#vite-常用配置" aria-label="Permalink to &quot;Vite 常用配置&quot;">​</a></h2><h3 id="开发服务器" tabindex="-1">开发服务器 <a class="header-anchor" href="#开发服务器" aria-label="Permalink to &quot;开发服务器&quot;">​</a></h3><p>可以通过 <code>vite.config.js</code> 中的 <a href="https://cn.vitejs.dev/config/server-options.html" target="_blank" rel="noreferrer"><code>server</code></a> 选项来配置开发阶段的服务器代理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  server: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    port: </span><span style="color:#79B8FF;">8080</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 指定开发服务器的端口号，默认为 3000</span></span>
<span class="line"><span style="color:#E1E4E8;">    open: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否在启动时自动打开浏览器</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 配置跨域代理</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;https://www.domain.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 要进行代理的域名</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api2&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;https://www.test.com&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 要进行代理的域名</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 修改请求头中的 host 和 origin</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;^/api2&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 将路径中的【/api2】重写为 &#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  server: {</span></span>
<span class="line"><span style="color:#24292E;">    port: </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 指定开发服务器的端口号，默认为 3000</span></span>
<span class="line"><span style="color:#24292E;">    open: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否在启动时自动打开浏览器</span></span>
<span class="line"><span style="color:#24292E;">    proxy: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 配置跨域代理</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;https://www.domain.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 要进行代理的域名</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api2&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;https://www.test.com&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 要进行代理的域名</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 修改请求头中的 host 和 origin</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;^/api2&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 将路径中的【/api2】重写为 &#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="映射目录别名" tabindex="-1">映射目录别名 <a class="header-anchor" href="#映射目录别名" aria-label="Permalink to &quot;映射目录别名&quot;">​</a></h3><p>配置目录别名非常方便，可以帮助你更轻松地引用项目中的模块或文件，同时提高代码的可维护性。</p><p>在项目根目录中的 <code>vite.config.js</code> 中添加配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 导入node路径模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#B392F0;">vue</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 配置路径别名</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 导入node路径模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#6F42C1;">vue</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">  resolve: {</span></span>
<span class="line"><span style="color:#24292E;">    alias: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;@&#39;</span><span style="color:#24292E;">: path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 配置路径别名</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="注入全局-sass-文件" tabindex="-1">注入全局 Sass 文件 <a class="header-anchor" href="#注入全局-sass-文件" aria-label="Permalink to &quot;注入全局 Sass 文件&quot;">​</a></h3><p>Vite 支持多种 CSS 预处理器，你可以通过 <code>css.preprocessorOptions</code> 配置选项来启用和配置它们。下面是一个全局注入 sass 文件的示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    preprocessorOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 配置 scss，也可以是 less、stylus</span></span>
<span class="line"><span style="color:#E1E4E8;">      scss: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 添加全局的 Sass 变量、混入等</span></span>
<span class="line"><span style="color:#E1E4E8;">        additionalData: </span><span style="color:#9ECBFF;">&#39;@import &quot;@/styles/variables.scss&quot;;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  css: {</span></span>
<span class="line"><span style="color:#24292E;">    preprocessorOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 配置 scss，也可以是 less、stylus</span></span>
<span class="line"><span style="color:#24292E;">      scss: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加全局的 Sass 变量、混入等</span></span>
<span class="line"><span style="color:#24292E;">        additionalData: </span><span style="color:#032F62;">&#39;@import &quot;@/styles/variables.scss&quot;;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="自定义-rollup-配置" tabindex="-1">自定义 Rollup 配置 <a class="header-anchor" href="#自定义-rollup-配置" aria-label="Permalink to &quot;自定义 Rollup 配置&quot;">​</a></h3><p>通过 <code>build.rollupOptions</code> 配置选项可以自定义 Rollup 打包过程中的一些配置，如代码拆分、压缩等。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        manualChunks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          lodash: [</span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  build: {</span></span>
<span class="line"><span style="color:#24292E;">    rollupOptions: {</span></span>
<span class="line"><span style="color:#24292E;">      output: {</span></span>
<span class="line"><span style="color:#24292E;">        manualChunks: {</span></span>
<span class="line"><span style="color:#24292E;">          lodash: [</span><span style="color:#032F62;">&#39;lodash&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,39),e=[o];function t(c,r,E,i,y,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{v as __pageData,F as default};
