import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1169fbc9.js";const h=JSON.parse('{"title":"事件处理","description":"","frontmatter":{},"headers":[],"relativePath":"articles/js/event.md","filePath":"articles/js/event.md"}'),o={name:"articles/js/event.md"},e=l(`<h1 id="事件处理" tabindex="-1">事件处理 <a class="header-anchor" href="#事件处理" aria-label="Permalink to &quot;事件处理&quot;">​</a></h1><p>它能够响应用户交互和其他浏览器事件。事件处理包括添加事件监听器以及定义事件处理函数</p><h2 id="事件类型" tabindex="-1">事件类型 <a class="header-anchor" href="#事件类型" aria-label="Permalink to &quot;事件类型&quot;">​</a></h2><p>事件类型是描述发生在网页上的各种操作或交互的名称。JavaScript 通过事件类型来识别何时发生了特定的事件，然后执行相应的事件处理函数。以下是一些常见的事件类型：</p><h3 id="鼠标事件" tabindex="-1">鼠标事件 <a class="header-anchor" href="#鼠标事件" aria-label="Permalink to &quot;鼠标事件&quot;">​</a></h3><ul><li><code>click</code>：当鼠标单击元素时触发。</li><li><code>mousedown</code>：当鼠标按下鼠标按钮时触发。</li><li><code>mouseup</code>：当释放鼠标按钮时触发。</li><li><code>mousemove</code>：当鼠标在元素上移动时触发。</li><li><code>mouseenter</code> 和 <code>mouseleave</code>：当鼠标进入或离开元素时触发。</li><li><code>mouseover</code> 和 <code>mouseout</code>：当鼠标进入或离开元素或其子元素时触发。</li><li><code>contextmenu</code>：按下鼠标右键时触发。</li><li><code>wheel</code>：鼠标滚轮滚动时触发。</li></ul><h3 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h3><ul><li><code>keydown</code>：当按下键盘上的任何键时触发。</li><li><code>keyup</code>：当释放键盘上的任何键时触发。</li><li><code>keypress</code>：当按下键盘上的字符键时触发（通常用于处理文本输入）。</li></ul><h3 id="表单事件" tabindex="-1">表单事件 <a class="header-anchor" href="#表单事件" aria-label="Permalink to &quot;表单事件&quot;">​</a></h3><ul><li><code>submit</code>：当表单提交时触发。</li><li><code>reset</code>：当表单重置时触发。</li><li><code>focus</code> 和 <code>blur</code>：当元素获得或失去焦点时触发。</li><li><code>change</code>：当输入字段的值发生变化时触发。</li><li><code>input</code>：当输入字段的值发生变化时触发（类似于 <code>change</code> 但更实时）。</li></ul><h3 id="网页生命周期事件" tabindex="-1">网页生命周期事件 <a class="header-anchor" href="#网页生命周期事件" aria-label="Permalink to &quot;网页生命周期事件&quot;">​</a></h3><ul><li><code>load</code>：当网页和所有资源加载完成时触发。</li><li><code>unload</code>：当网页被卸载或关闭时触发。</li><li><code>DOMContentLoaded</code>：当 DOM 结构加载完成时触发，不包括样式表、图像和其他资源。</li></ul><h3 id="拖放事件" tabindex="-1">拖放事件 <a class="header-anchor" href="#拖放事件" aria-label="Permalink to &quot;拖放事件&quot;">​</a></h3><ul><li><code>dragstart</code>：当拖动元素开始时触发。</li><li><code>drag</code>：当拖动元素时触发。</li><li><code>dragend</code>：当拖动元素结束时触发。</li></ul><h3 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h3><ul><li><code>resize</code>：当浏览器窗口大小改变时触发。</li><li><code>scroll</code>：当元素滚动时触发。</li></ul><p>这只是一小部分常见的事件类型。每个事件类型都有相关的事件对象，包含了与事件相关的信息，如触发事件的元素、事件类型、鼠标位置、键盘键码等等。通过事件类型，您可以编写事件处理程序来响应用户的交互和操作。</p><h2 id="添加事件监听器" tabindex="-1">添加事件监听器 <a class="header-anchor" href="#添加事件监听器" aria-label="Permalink to &quot;添加事件监听器&quot;">​</a></h2><h3 id="addeventlistener" tabindex="-1">addEventListener <a class="header-anchor" href="#addeventlistener" aria-label="Permalink to &quot;addEventListener&quot;">​</a></h3><p>它是一个向 DOM 对象添加事件监听的方法，在特定的事件类型上注册事件处理函数</p><p>接收三个参数：</p><ol><li><strong>事件类型（event type）</strong>：表示要监听的事件类型，例如 &quot;click&quot;、&quot;mouseover&quot;、&quot;keydown&quot; 等</li><li><strong>事件处理函数（event listener）</strong>：一个函数，当事件被触发时将被调用执行</li><li><strong>捕获阶段（capture phase）</strong>：是一个可选的布尔值参数，如果为 <code>true</code>，则表示事件在捕获阶段触发。默认值为 <code>false</code>，表示事件在冒泡阶段触发。</li></ol><p>示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">btn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">btn.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;按钮被点击了！&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">btn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">btn.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;按钮被点击了！&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong>注意事项</strong></p><ul><li>可以使用 <code>addEventListener</code> 为同一个 DOM 元素添加多个事件监听器</li><li>使用 <code>removeEventListener</code> 方法可以删除已添加的事件监听器</li><li>当事件触发时，事件对象将被传递给事件处理函数，包含有关事件的详细信息</li></ul><h3 id="on-方式" tabindex="-1">on 方式 <a class="header-anchor" href="#on-方式" aria-label="Permalink to &quot;on 方式&quot;">​</a></h3><blockquote><p><code>addEventListener</code> 方法是一种更现代、更强大的事件处理机制，推荐在 JavaScript 中使用它来管理事件</p></blockquote><p>使用 on 加上事件类型可以为 DOM 元素添加事件监听器，示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">btn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加事件监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">btn.</span><span style="color:#B392F0;">onclick</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;按钮被点击了&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 移除事件监听器</span></span>
<span class="line"><span style="color:#E1E4E8;">btn.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">btn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;button&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加事件监听器</span></span>
<span class="line"><span style="color:#24292E;">btn.</span><span style="color:#6F42C1;">onclick</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;按钮被点击了&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 移除事件监听器</span></span>
<span class="line"><span style="color:#24292E;">btn.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span></code></pre></div><p><strong>注意事项</strong></p><ul><li>不能为同一个 DOM 元素添加多个事件监听器</li></ul><h2 id="事件对象" tabindex="-1">事件对象 <a class="header-anchor" href="#事件对象" aria-label="Permalink to &quot;事件对象&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event" target="_blank" rel="noreferrer">事件对象（Event Object）</a>是在 DOM 事件处理函数中传递的一个对象，它包含有关事件的详细信息，如事件类型、事件目标元素、鼠标位置等</p><p>在事件处理函数中，事件对象通常作为参数传递给函数。以下是事件对象的一些常见属性和方法</p><p><strong>1. <code>event.type</code>：</strong> 表示触发的事件类型，例如 &quot;click&quot;、&quot;keydown&quot; 等。</p><p><strong>2. <code>event.target</code>：</strong> 表示触发事件的 DOM 元素，即事件的目标元素。</p><p><strong>3. <code>event.currentTarget</code>：</strong> 表示当前正在处理事件的 DOM 元素，通常与 <code>this</code> 关键字相同。</p><p><strong>4. <code>event.clientX</code> 和 <code>event.clientY</code>：</strong> 表示鼠标指针相对于浏览器窗口的水平和垂直坐标。</p><p><strong>5. <code>event.preventDefault()</code>：</strong> 阻止事件的默认行为，例如阻止表单的提交或链接的跳转。</p><p><strong>6. <code>event.stopPropagation()</code>：</strong> 阻止事件的传播，即阻止事件继续冒泡或捕获。</p><p><strong>7. <code>event.keyCode</code> 和 <code>event.key</code>：</strong> 用于键盘事件，表示按下的键的键码和键名。</p><p>示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myButton&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">button.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取事件类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;事件类型：&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.type)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取事件目标元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;事件目标元素：&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.target.tagName)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取鼠标位置</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;鼠标位置：&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.clientX </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> event.clientY)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 阻止事件的默认行为</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">button</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;myButton&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">button.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取事件类型</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;事件类型：&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.type)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取事件目标元素</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;事件目标元素：&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.target.tagName)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取鼠标位置</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;鼠标位置：&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.clientX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> event.clientY)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 阻止事件的默认行为</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="阻止默认行为" tabindex="-1">阻止默认行为 <a class="header-anchor" href="#阻止默认行为" aria-label="Permalink to &quot;阻止默认行为&quot;">​</a></h2><p>阻止默认行为是指防止事件发生时浏览器自动执行的操作。例如，点击链接时默认情况下会导致浏览器跳转到链接指定的 URL，按下提交按钮时会默认提交表单。可以使用事件对象的 <code>event.preventDefault()</code> 方法来阻止默认行为。以下是一些常见的示例：</p><ul><li>阻止链接的默认跳转行为</li><li>阻止表单的默认提交行为</li><li>阻止键盘事件的默认行为</li><li>...</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelector</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;form&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">form.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;submit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">preventDefault</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 阻止表单提交的默认行为</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">form</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;form&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">form.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;submit&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">preventDefault</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 阻止表单提交的默认行为</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>通过使用 <code>event.preventDefault()</code>，您可以更精确地控制事件的行为，以满足您的特定需求，而不受浏览器默认行为的限制。这对于构建交互式和用户友好的 Web 应用程序非常有用。</p><h2 id="停止事件传播" tabindex="-1">停止事件传播 <a class="header-anchor" href="#停止事件传播" aria-label="Permalink to &quot;停止事件传播&quot;">​</a></h2><p>停止事件传播是指阻止事件在 DOM 树中的进一步传播，包括捕获阶段和冒泡阶段。</p><h3 id="事件传播" tabindex="-1">事件传播 <a class="header-anchor" href="#事件传播" aria-label="Permalink to &quot;事件传播&quot;">​</a></h3><p>事件传播是指当一个事件在 DOM 中触发时，该事件如何传播到不同的 DOM 元素，以及如何处理这些事件。事件传播分为三个阶段：捕获阶段（Capture Phase）、目标阶段（Target Phase）和冒泡阶段（Bubbling Phase）。这个过程被称为事件传播或事件流。</p><p><strong>捕获阶段（Capture Phase）</strong>：</p><ul><li>事件从文档的根节点（通常是 <code>&lt;html&gt;</code> 元素）开始传播，向下到达触发事件的目标元素的父元素。</li><li>在捕获阶段，事件经过父元素、祖父元素等，直到到达目标元素。</li><li>如果在捕获阶段的某个元素上注册了事件处理程序，它会在此阶段执行。</li></ul><p><strong>目标阶段（Target Phase）</strong>：</p><ul><li>事件达到了触发事件的目标元素。</li><li>事件在目标元素上触发，会执行与目标元素相关联的事件处理程序。</li></ul><p><strong>冒泡阶段（Bubbling Phase）</strong>：</p><ul><li>事件从目标元素开始向上冒泡，逐级传播到文档的根节点。</li><li>在冒泡阶段，事件经过目标元素的父元素、祖父元素等，直到到达文档根节点。</li><li>如果在冒泡阶段的某个元素上注册了事件处理程序，它会在此阶段执行。</li></ul><h3 id="阻止冒泡传播" tabindex="-1">阻止冒泡传播 <a class="header-anchor" href="#阻止冒泡传播" aria-label="Permalink to &quot;阻止冒泡传播&quot;">​</a></h3><p>当事件在 DOM 中冒泡传播时，可以通过调用 <code>event.stopPropagation()</code> 阻止它继续向上冒泡，从而防止祖先元素上的事件处理程序被触发。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dom.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  event.</span><span style="color:#B392F0;">stopPropagation</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 阻止事件冒泡传播到父元素</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dom.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  event.</span><span style="color:#6F42C1;">stopPropagation</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 阻止事件冒泡传播到父元素</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="阻止捕获传播" tabindex="-1">阻止捕获传播 <a class="header-anchor" href="#阻止捕获传播" aria-label="Permalink to &quot;阻止捕获传播&quot;">​</a></h3><p>事件传播的默认行为是从捕获阶段开始，然后到达目标阶段，最后进入冒泡阶段。这个默认行为可以通过 <code>addEventListener()</code> 方法的第三个参数（<code>useCapture</code>）来控制。如果 <code>useCapture</code> 为 <code>true</code>，则事件将在捕获阶段执行；如果为 <code>false</code>（默认值），则事件将在冒泡阶段执行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">element.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(event, handler, useCapture)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(event, handler, useCapture)</span></span></code></pre></div><p>类似地，可以在事件捕获阶段使用 <code>event.stopPropagation()</code> 阻止事件在 DOM 中继续向下传播，从而防止祖先元素上的捕获阶段事件处理程序被触发。要在捕获阶段停止传播，需要将 <code>addEventListener</code> 的第三个参数设置为 <code>true</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">child.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    event.</span><span style="color:#B392F0;">stopPropagation</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 阻止事件冒泡传播到父元素</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 在捕获阶段触发</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">child.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    event.</span><span style="color:#6F42C1;">stopPropagation</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 阻止事件冒泡传播到父元素</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 在捕获阶段触发</span></span></code></pre></div>`,67),p=[e];function t(c,r,E,i,y,d){return n(),a("div",null,p)}const v=s(o,[["render",t]]);export{h as __pageData,v as default};
