import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.DwILdc5J.js";const c=JSON.parse('{"title":"HTTP","description":"","frontmatter":{},"headers":[],"relativePath":"blog/http.md","filePath":"blog/http.md"}'),l={name:"blog/http.md"},n=t(`<h1 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h1><p>HTTP（超文本传输协议，Hypertext Transfer Protocol）是五层网络模型中的应用层的一种协议，用于传输超文本和媒体资源。定义了 Web 客户端（如浏览器）和 Web 服务器之间的通信规则。</p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li><strong>无状态</strong>：HTTP 是一个无状态协议，每个请求都是独立的，与之前的请求或后续的请求无关。这意味着服务器不会自动保存任何请求的信息。为了维护会话状态，需要使用 Cookies、Sessions 等机制。</li><li><strong>简单</strong>：HTTP 消息是纯文本格式的，易于理解和调试。HTTP/1.x 版本中，消息由头部和主体两部分组成。</li><li><strong>灵活</strong>：HTTP 可以传输任何类型的数据，不限于文本数据，可以通过 Content-Type 头来指定数据类型。</li></ul><h2 id="请求" tabindex="-1">请求 <a class="header-anchor" href="#请求" aria-label="Permalink to &quot;请求&quot;">​</a></h2><p>HTTP 请求内容由请求行、请求头、请求体组成。</p><ul><li>请求行：由三部分内容，以空格隔开，分别为 请求方法、资源路径、http 版本，以换行结束</li><li>请求头：提供关于客户端环境、请求主体和请求本身的信息，若干键值对组成，以回车隔开，双换行结束</li><li>请求体：要发送给服务器的数据，数据类型对应请求头中 Content-Type 的 MIME 类型</li></ul><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /login </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://localhost:3000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>提示</p><p>1.query 参数中不能包含非 ASCII 码字符，如果有浏览器会自动转为 ASCII 码。</p><p>2.query 参数有最大长度限制，不宜在此位置存放过长的参数。</p></blockquote><h2 id="响应" tabindex="-1">响应 <a class="header-anchor" href="#响应" aria-label="Permalink to &quot;响应&quot;">​</a></h2><p>HTTP 请求内容由请求行、请求头、请求体组成。</p><ul><li>状态行：包括 HTTP 版本、状态码和状态描述。</li><li>响应头：提供关于服务器和响应主体的信息（如 Content-Type、Content-Length）。</li><li>响应主体：服务器返回给客户端的数据。</li></ul><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 137</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Example&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, World!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="常见请求方法" tabindex="-1">常见请求方法 <a class="header-anchor" href="#常见请求方法" aria-label="Permalink to &quot;常见请求方法&quot;">​</a></h2><p>http 的请求方法本质是相同的，只是语义的不同，人们根据语义来对不同的请求方法进行区分，实际上就连 get 方法也支持添加请求体，只要和服务器协商一致。</p><ul><li>GET：获取数据</li><li>POST：提交数据</li><li>PUT：修改数据</li><li>DELETE：删除数据</li><li>HEAD：获取数据的笼统信息（如大小、类型等）。不返回响应体。</li></ul><h2 id="常见-http-状态码" tabindex="-1">常见 HTTP 状态码 <a class="header-anchor" href="#常见-http-状态码" aria-label="Permalink to &quot;常见 HTTP 状态码&quot;">​</a></h2><p>状态码由开发服务器的人控制返回，有时候并不完全正确</p><p><strong>1xx（信息性状态码）</strong></p><ul><li>100 Continue：服务器收到请求的初始部分，客户端应继续发送请求的其余部分。</li></ul><p><strong>2xx（成功状态码）</strong></p><ul><li>200 OK：请求成功。</li><li>201 Created：请求成功并创建了新的资源。</li></ul><p><strong>3xx（重定向状态码）</strong></p><ul><li>301 Moved Permanently：资源永久移动到新位置。</li><li>302 Found：资源临时移动到新位置。</li></ul><p><strong>4xx（客户端错误状态码）</strong></p><ul><li>400 Bad Request：请求无效。</li><li>401 Unauthorized：需要身份验证。</li><li>403 Forbidden：服务器拒绝请求。</li><li>404 Not Found：资源未找到。</li></ul><p><strong>5xx（服务器错误状态码）</strong></p><ul><li>500 Internal Server Error：服务器内部错误。</li><li>502 Bad Gateway：网关或代理服务器收到无效响应。</li><li>503 Service Unavailable：服务器当前无法处理请求。</li></ul><h2 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h2><p>HTTP 本身是不安全的，因为传输的数据是明文的。为了保护数据的安全性，可以使用 HTTPS（HTTP Secure），它在 HTTP 基础上增加了 TLS/SSL 加密层，确保数据在传输过程中不会被窃取或篡改。</p>`,30),h=[n];function e(p,k,r,o,E,d){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{c as __pageData,y as default};
